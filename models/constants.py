import math

# Model Parameters
# LSTM
MELODY_LENGTH = 7
MELODY_EMBEDDING_SIZE = 100
LSTM_NUM_LAYERS = 2
HIDDEN_SIZE_1 = 100
HIDDEN_SIZE_2 = 32
LINEAR_HIDDEN_SIZE_1 = 100
LINEAR_HIDDEN_SIZE_2 = 32

# Training parameters
BATCH_SIZE = 16
LEARNING_RATE = 0.001
WEIGHT_DECAY = 0.1
TRAIN_VALIDATION_SPLIT = 1

# VAE
CHORD_LENGTH = 16
CHORD_EMBEDDING_SIZE = 40
NUM_LAYERS = 2
HIDDEN_SIZE = 256
HIDDEN_SIZE2 = 256
SAMPLE_SIZE = 32
TEACHER_FORCE = True
SCHEDULED_SAMPLING_CONVERGENCE = 30
START_SCHEDULED_SAMPLING_RATE = 0.5
END_SCHEDULED_SAMPLING_RATE = 0.1


# inverse sigmoid decay
def sampling_rate_at_epoch(epoch):
    if epoch < 0:
        return START_SCHEDULED_SAMPLING_RATE
    return (
        SCHEDULED_SAMPLING_CONVERGENCE
        / (
            SCHEDULED_SAMPLING_CONVERGENCE
            + math.exp(epoch / SCHEDULED_SAMPLING_CONVERGENCE)
        )
    ) * (
        START_SCHEDULED_SAMPLING_RATE - END_SCHEDULED_SAMPLING_RATE
    ) + END_SCHEDULED_SAMPLING_RATE
